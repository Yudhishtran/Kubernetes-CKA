Understand the basics of TLS/SSL certificates.
How Private and Public key works (Asymmetric)
Once communication is established,as after the asymmetric keys are validated, using symmetric keys is faster for communication.

In a K8s cluster, the control plane components uses certificates to secure the communication with the API server,
all the components acts as the clients (ie, Scheduler, controller manager, kubelet, kubeproxy, admin)
While the API server acts as the server for all the components, the ETCD only communicates with the Kube-API server so, the ETCD acts as the server and api-server as client to the ETCD.


Self-Signing CA for the kubernetes cluster using Open-SSL :

Generating a key :-

openssl genrsa -out ca.key 2048

Certificate Signing Request :-

openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA" -out ca.csr

Sign Certificate :-

openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt

To validate each other, a signed CA certificate is distributed to all the control plane components

giving Restful API request with certificates, 


Decoding a cert to read what's inside,

openssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout

----------------------------------------------------------------  CERTIFICATES API  ----------------------------------------------------
with the CA file anyone can create a new node or user within the cluster so it has to be stored securely by the administrator.

Creating cert for a new user and applying to the cluster.

openssl genrsa -out jane.key 2048
openssl req -new -key jane.key -subj "/CN=jane" -out jane.csr

Use the key and create a CertificateSigningObject 

now, write a Certificate Signing Request in yaml:

apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: jane
spec:
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 600
  usages:
    - client auth
	- digital signature
	- key encipherment
	- server auth
  request: <base64-encoded-CSR>

encode the content in CSR file into base64 and paste it insie the "request:" section.

and then,

kubectl get csr, --- > shows all the csr available
kubectl certificate approve jane
kubectl get csr jane -o yaml

All the certificate management is done by controller manager. Within the conrtoller manager we can see the ca.crt and ca.key which is definitely needed to sign other certificates.
